// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using InterviewChallenge.Data.Models.Db;
using Microsoft.EntityFrameworkCore;
using InterviewChallenge.Data.Models.Db.dboSchema;

namespace InterviewChallenge.Data.Repositories.Db;

public partial class InterviewChallengeContainer //: DbContext
{
    public InterviewChallengeContainer(DbContextOptions<InterviewChallengeContainer> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<FeedRunLog> FeedRunLogs { get; set; }

    public virtual DbSet<SyndicationFeed> SyndicationFeeds { get; set; }

    public virtual DbSet<SyndicationFeedToCategory> SyndicationFeedToCategories { get; set; }

    public virtual DbSet<SyndicationSource> SyndicationSources { get; set; }

    public virtual DbSet<SyndicationToCategory> SyndicationToCategories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo._Category");

            entity.ToTable("Category");

            entity.HasIndex(e => e.Name, "UX_Category_Name").IsUnique();

            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("1");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<FeedRunLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FeedRunLog");

            entity.ToTable("FeedRunLog");

            entity.HasIndex(e => new { e.DateCreated, e.HttpStatus, e.SyndicationSourceId }, "IX_FeedRunLog_HttpStatusSyndicationSourceId");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("GetUtcDate()");
            entity.Property(e => e.FeedPayload).IsUnicode(false);

            entity.HasOne(d => d.SyndicationSource).WithMany(p => p.FeedRunLogs)
                .HasForeignKey(d => d.SyndicationSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FeedRunLog_Feed");
        });

        modelBuilder.Entity<SyndicationFeed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SyndicationFeed");

            entity.ToTable("SyndicationFeed");

            entity.HasIndex(e => e.Author, "IX_SyndicationFeed_Author");

            entity.HasIndex(e => new { e.DateCreated, e.IsActive }, "IX_SyndicationFeed_DateCreate");

            entity.HasIndex(e => e.Sha512, "IX_SyndicationFeed_Sha512");

            entity.HasIndex(e => e.Title, "IX_SyndicationFeed_Title");

            entity.Property(e => e.Author).HasMaxLength(128);
            entity.Property(e => e.ChannelId)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("GetUtcDate()");
            entity.Property(e => e.Enclosure)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("1");
            entity.Property(e => e.LastUpdated).HasDefaultValueSql("GetUtcDate()");
            entity.Property(e => e.Link)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Sha512)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.SourceId)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(1024);
            entity.Property(e => e.VideoId)
                .HasMaxLength(32)
                .IsUnicode(false);

            entity.HasOne(d => d.SyndicationSource).WithMany(p => p.SyndicationFeeds)
                .HasForeignKey(d => d.SyndicationSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SyndicationFeed_SyndicationSource");
        });

        modelBuilder.Entity<SyndicationFeedToCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SyndicationFeedToCategory");

            entity.ToTable("SyndicationFeedToCategory");

            entity.HasIndex(e => new { e.SyndicationFeedId, e.CategoryId }, "UX_SyndicationFeedToCategory_FeedIdCategoryId").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("NewSequentialId()");

            entity.HasOne(d => d.Category).WithMany(p => p.SyndicationFeedToCategories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SyndicationFeedToCategory_Category");

            entity.HasOne(d => d.SyndicationFeed).WithMany(p => p.SyndicationFeedToCategories)
                .HasForeignKey(d => d.SyndicationFeedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SyndicationFeedToCategory_SyndicationFeed");
        });

        modelBuilder.Entity<SyndicationSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SyndicationSource");

            entity.ToTable("SyndicationSource");

            entity.HasIndex(e => new { e.BaseUri, e.IsActive }, "IX_SyndicationSource_BaseUri_IsActive");

            entity.HasIndex(e => new { e.Title, e.IsActive }, "IX_SyndicationSource_Title_IsActive");

            entity.HasIndex(e => e.BaseUri, "UX_SyndicationSource_BaseUri").IsUnique();

            entity.Property(e => e.BaseUri)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Copyright)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("GetUtcDate()");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IntervalSeconds).HasDefaultValueSql("1800");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("1");
            entity.Property(e => e.LastUpdated).HasDefaultValueSql("GetUtcDate()");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(128);
        });

        modelBuilder.Entity<SyndicationToCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SyndicationToCategory");

            entity.ToTable("SyndicationToCategory");

            entity.HasIndex(e => new { e.SyndicationSourceId, e.CategoryId }, "UX_SyndicationToCategory_SourceIdCategoryId").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("NewSequentialId()");

            entity.HasOne(d => d.Category).WithMany(p => p.SyndicationToCategories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SyndicationToCategory_Category");

            entity.HasOne(d => d.SyndicationSource).WithMany(p => p.SyndicationToCategories)
                .HasForeignKey(d => d.SyndicationSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SyndicationToCategory_SyndicationSource");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}